<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Git on Debug客栈</title><link>https://blog.debuginn.com/categories/git/</link><follow_challenge><feedId>41458948890269701</feedId><userId>55093859933428736</userId></follow_challenge><description>Recent content in Git on Debug客栈</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Fri, 25 Mar 2022 22:30:21 +0800</lastBuildDate><atom:link href="https://blog.debuginn.com/categories/git/index.xml" rel="self" type="application/rss+xml"/><item><title>Git 常用命令汇总</title><link>https://blog.debuginn.com/p/git-command/</link><pubDate>Fri, 25 Mar 2022 22:30:21 +0800</pubDate><guid>https://blog.debuginn.com/p/git-command/</guid><description>&lt;img src="https://webp.debuginn.com/202303252231697.jpg" alt="Featured image of post Git 常用命令汇总" /&gt;&lt;h2 id="常规操作"&gt;&lt;a href="#%e5%b8%b8%e8%a7%84%e6%93%8d%e4%bd%9c" class="header-anchor"&gt;&lt;/a&gt;常规操作
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git push origin test&lt;/code&gt; 推送本地分支到远程仓库&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git rm -r --cached&lt;/code&gt; 文件/文件夹名字 取消文件被版本控制&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git reflog&lt;/code&gt; 获取执行过的命令&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git log --graph&lt;/code&gt; 查看分支合并图&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git merge --no-ff -m '合并描述'&lt;/code&gt; 分支名 不使用&lt;code&gt;Fast forward&lt;/code&gt;方式合并，采用这种方式合并可以看到合并记录&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git check-ignore -v 文件名&lt;/code&gt; 查看忽略规则&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git add -f 文件名&lt;/code&gt; 强制将文件提交&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="git-创建项目仓库"&gt;&lt;a href="#git-%e5%88%9b%e5%bb%ba%e9%a1%b9%e7%9b%ae%e4%bb%93%e5%ba%93" class="header-anchor"&gt;&lt;/a&gt;Git 创建项目仓库
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git init&lt;/code&gt; 初始化&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git remote add origin url&lt;/code&gt; 关联远程仓库&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git pull&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git fetch&lt;/code&gt; 获取远程仓库中所有的分支到本地&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="忽略已加入到版本库中的文件"&gt;&lt;a href="#%e5%bf%bd%e7%95%a5%e5%b7%b2%e5%8a%a0%e5%85%a5%e5%88%b0%e7%89%88%e6%9c%ac%e5%ba%93%e4%b8%ad%e7%9a%84%e6%96%87%e4%bb%b6" class="header-anchor"&gt;&lt;/a&gt;忽略已加入到版本库中的文件
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git update-index --assume-unchanged file&lt;/code&gt; 忽略单个文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git rm -r --cached 文件/文件夹名字&lt;/code&gt; (. 忽略全部文件)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="取消忽略文件"&gt;&lt;a href="#%e5%8f%96%e6%b6%88%e5%bf%bd%e7%95%a5%e6%96%87%e4%bb%b6" class="header-anchor"&gt;&lt;/a&gt;取消忽略文件
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;git update-index --no-assume-unchanged file&lt;/code&gt;&lt;/p&gt;
&lt;h3 id="拉取上传免密码"&gt;&lt;a href="#%e6%8b%89%e5%8f%96%e4%b8%8a%e4%bc%a0%e5%85%8d%e5%af%86%e7%a0%81" class="header-anchor"&gt;&lt;/a&gt;拉取、上传免密码
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;git config --global credential.helper store&lt;/code&gt;&lt;/p&gt;
&lt;h2 id="分支操作"&gt;&lt;a href="#%e5%88%86%e6%94%af%e6%93%8d%e4%bd%9c" class="header-anchor"&gt;&lt;/a&gt;分支操作
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git branch&lt;/code&gt; 创建分支&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git branch -b&lt;/code&gt; 创建并切换到新建的分支上&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git checkout&lt;/code&gt; 切换分支&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git branch&lt;/code&gt; 查看分支列表&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git branch -v&lt;/code&gt; 查看所有分支的最后一次操作&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git branch -vv&lt;/code&gt; 查看当前分支&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git branch -b 分支名 origin/分支名&lt;/code&gt; 创建远程分支到本地&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git branch --merged&lt;/code&gt; 查看别的分支和当前分支合并过的分支&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git branch --no-merged&lt;/code&gt; 查看未与当前分支合并的分支&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git branch -d 分支名&lt;/code&gt; 删除本地分支&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git branch -D 分支名&lt;/code&gt; 强行删除分支&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git push origin --delete 分支名&lt;/code&gt; 删除远程仓库分支&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git merge 分支名&lt;/code&gt; 合并分支到当前分支上&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="暂存操作"&gt;&lt;a href="#%e6%9a%82%e5%ad%98%e6%93%8d%e4%bd%9c" class="header-anchor"&gt;&lt;/a&gt;暂存操作
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git stash&lt;/code&gt; 暂存当前修改&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git stash apply&lt;/code&gt; 恢复最近的一次暂存&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git stash pop&lt;/code&gt; 恢复暂存并删除暂存记录&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git stash list&lt;/code&gt; 查看暂存列表&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git stash drop 暂存名&lt;/code&gt;(例：stash@{0}) 移除某次暂存&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git stash clear&lt;/code&gt; 清除暂存&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="回退操作"&gt;&lt;a href="#%e5%9b%9e%e9%80%80%e6%93%8d%e4%bd%9c" class="header-anchor"&gt;&lt;/a&gt;回退操作
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git reset --hard HEAD^&lt;/code&gt; 回退到上一个版本&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git reset --hard commitId&lt;/code&gt; 回退到某个版本&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git checkout -- file&lt;/code&gt;撤销修改的文件(如果文件加入到了暂存区，则回退到暂存区的，如果文件加入到了版本库，则还原至加入版本库之后的状态)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git reset HEAD file&lt;/code&gt; 撤回暂存区的文件修改到工作区&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="标签操作"&gt;&lt;a href="#%e6%a0%87%e7%ad%be%e6%93%8d%e4%bd%9c" class="header-anchor"&gt;&lt;/a&gt;标签操作
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git tag 标签名&lt;/code&gt; 添加标签(默认对当前版本)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git tag 标签名 commitId&lt;/code&gt; 对某一提交记录打标签&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git tag -a 标签名 -m '描述'&lt;/code&gt; 创建新标签并增加备注&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git tag&lt;/code&gt; 列出所有标签列表&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git show 标签名&lt;/code&gt; 查看标签信息&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git tag -d 标签名&lt;/code&gt; 删除本地标签&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git push origin 标签名&lt;/code&gt; 推送标签到远程仓库&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git push origin --tags&lt;/code&gt; 推送所有标签到远程仓库&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git push origin :refs/tags/标签名&lt;/code&gt; 从远程仓库中删除标签&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="远程仓库"&gt;&lt;a href="#%e8%bf%9c%e7%a8%8b%e4%bb%93%e5%ba%93" class="header-anchor"&gt;&lt;/a&gt;远程仓库
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git remote -v&lt;/code&gt;查看远程仓库地址&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git remote show origin&lt;/code&gt;查看远程仓库详情信息&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="查看某个-commit-提交属于哪个分支"&gt;&lt;a href="#%e6%9f%a5%e7%9c%8b%e6%9f%90%e4%b8%aa-commit-%e6%8f%90%e4%ba%a4%e5%b1%9e%e4%ba%8e%e5%93%aa%e4%b8%aa%e5%88%86%e6%94%af" class="header-anchor"&gt;&lt;/a&gt;查看某个 commit 提交属于哪个分支
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git branch -l --contains &amp;lt;commit_id&amp;gt;&lt;/code&gt; 本地分支&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git branch -r --contains &amp;lt;commit_id&amp;gt;&lt;/code&gt; 远程分支&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git branch --all --contains &amp;lt;commit_id&amp;gt;&lt;/code&gt; 所有分支&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;&lt;p&gt;关注微信公众号，第一时间获取最新内容，让我们一起变得更强！&lt;/p&gt;&lt;p&gt;&lt;img src="https://static.debuginn.com/20241111FZS0zY.png" alt="wechat" /&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Debug客栈：&lt;/strong&gt;&lt;a href="https://blog.debuginn.com/subscribe"&gt;订阅本站&lt;/a&gt;· &lt;a href="https://blog.debuginn.com/archives"&gt;文章归档&lt;/a&gt;· &lt;a href="https://blog.debuginn.com/project"&gt;我的项目&lt;/a&gt;· &lt;a href="https://blog.debuginn.com/links"&gt;友情链接&lt;/a&gt;· &lt;a href="https://blog.debuginn.com/use"&gt;我的使用&lt;/a&gt;· &lt;a href="https://photo.debuginn.com"&gt;摄影展集&lt;/a&gt;· &lt;a href="https://debuginn.com"&gt;我的主页&lt;/a&gt;&lt;/p&gt;</description></item><item><title>Gource 版本可视化工具 使用手册</title><link>https://blog.debuginn.com/p/linux-tools-gource/</link><pubDate>Wed, 16 Mar 2022 19:31:40 +0800</pubDate><guid>https://blog.debuginn.com/p/linux-tools-gource/</guid><description>&lt;img src="https://webp.debuginn.com/202303161933689.jpg" alt="Featured image of post Gource 版本可视化工具 使用手册" /&gt;&lt;p&gt;&lt;strong&gt;Gource&lt;/strong&gt; 是一款版本控制可视化的工具，使用这个工具可以将自己的 Git 提交的代码包括对 &lt;strong&gt;Mercurial&lt;/strong&gt;，&lt;strong&gt;Bazaar&lt;/strong&gt; 和 &lt;strong&gt;SVN&lt;/strong&gt; 的内置日志生成可视化支持。Gource 还可以解析由多个第三方工具为 CVS 存储库生成的日志。
提交的代码按照时间轴的顺序动态显示出来，可以使你的工作过程以动画的形式显现，并且 Gource 这个工具可以显示出来不同用户对一个代码库进行同一时间内的修改操作。&lt;/p&gt;
&lt;p&gt;官方网站：&lt;a class="link" href="https://gource.io/" target="_blank" rel="noopener"
&gt;https://gource.io/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="常用命令"&gt;&lt;a href="#%e5%b8%b8%e7%94%a8%e5%91%bd%e4%bb%a4" class="header-anchor"&gt;&lt;/a&gt;常用命令
&lt;/h2&gt;&lt;p&gt;在这里我列举几个经常使用到的命令，PS：你需要先进入到对应项目目录中去，这个很重要，要不然会提示该目录下没有 log 记录。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;span class="lnt"&gt;2
&lt;/span&gt;&lt;span class="lnt"&gt;3
&lt;/span&gt;&lt;span class="lnt"&gt;4
&lt;/span&gt;&lt;span class="lnt"&gt;5
&lt;/span&gt;&lt;span class="lnt"&gt;6
&lt;/span&gt;&lt;span class="lnt"&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;gource &lt;span class="c1"&gt;# 使用Gource查看版本历史&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;gource -f -1280×720 &lt;span class="c1"&gt;# 设置分辨率大小&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;gource -s 0.5 &lt;span class="c1"&gt;# 每天以0.5秒的速度播放&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;gource -o 1.mp4 &lt;span class="c1"&gt;# 将版本动画导出到 1.mp4 文件中&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;gource -s 0.1 -o 2.mp4 &lt;span class="c1"&gt;# 每天以0.1秒的速度导出到 2.mp4 文件中&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;gource -f -b red &lt;span class="c1"&gt;# 将背景设置为红色&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;gource --title “Gource” &lt;span class="c1"&gt;# 为gource设置title&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id="基本命令"&gt;&lt;a href="#%e5%9f%ba%e6%9c%ac%e5%91%bd%e4%bb%a4" class="header-anchor"&gt;&lt;/a&gt;基本命令
&lt;/h2&gt;&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt; 1
&lt;/span&gt;&lt;span class="lnt"&gt; 2
&lt;/span&gt;&lt;span class="lnt"&gt; 3
&lt;/span&gt;&lt;span class="lnt"&gt; 4
&lt;/span&gt;&lt;span class="lnt"&gt; 5
&lt;/span&gt;&lt;span class="lnt"&gt; 6
&lt;/span&gt;&lt;span class="lnt"&gt; 7
&lt;/span&gt;&lt;span class="lnt"&gt; 8
&lt;/span&gt;&lt;span class="lnt"&gt; 9
&lt;/span&gt;&lt;span class="lnt"&gt;10
&lt;/span&gt;&lt;span class="lnt"&gt;11
&lt;/span&gt;&lt;span class="lnt"&gt;12
&lt;/span&gt;&lt;span class="lnt"&gt;13
&lt;/span&gt;&lt;span class="lnt"&gt;14
&lt;/span&gt;&lt;span class="lnt"&gt;15
&lt;/span&gt;&lt;span class="lnt"&gt;16
&lt;/span&gt;&lt;span class="lnt"&gt;17
&lt;/span&gt;&lt;span class="lnt"&gt;18
&lt;/span&gt;&lt;span class="lnt"&gt;19
&lt;/span&gt;&lt;span class="lnt"&gt;20
&lt;/span&gt;&lt;span class="lnt"&gt;21
&lt;/span&gt;&lt;span class="lnt"&gt;22
&lt;/span&gt;&lt;span class="lnt"&gt;23
&lt;/span&gt;&lt;span class="lnt"&gt;24
&lt;/span&gt;&lt;span class="lnt"&gt;25
&lt;/span&gt;&lt;span class="lnt"&gt;26
&lt;/span&gt;&lt;span class="lnt"&gt;27
&lt;/span&gt;&lt;span class="lnt"&gt;28
&lt;/span&gt;&lt;span class="lnt"&gt;29
&lt;/span&gt;&lt;span class="lnt"&gt;30
&lt;/span&gt;&lt;span class="lnt"&gt;31
&lt;/span&gt;&lt;span class="lnt"&gt;32
&lt;/span&gt;&lt;span class="lnt"&gt;33
&lt;/span&gt;&lt;span class="lnt"&gt;34
&lt;/span&gt;&lt;span class="lnt"&gt;35
&lt;/span&gt;&lt;span class="lnt"&gt;36
&lt;/span&gt;&lt;span class="lnt"&gt;37
&lt;/span&gt;&lt;span class="lnt"&gt;38
&lt;/span&gt;&lt;span class="lnt"&gt;39
&lt;/span&gt;&lt;span class="lnt"&gt;40
&lt;/span&gt;&lt;span class="lnt"&gt;41
&lt;/span&gt;&lt;span class="lnt"&gt;42
&lt;/span&gt;&lt;span class="lnt"&gt;43
&lt;/span&gt;&lt;span class="lnt"&gt;44
&lt;/span&gt;&lt;span class="lnt"&gt;45
&lt;/span&gt;&lt;span class="lnt"&gt;46
&lt;/span&gt;&lt;span class="lnt"&gt;47
&lt;/span&gt;&lt;span class="lnt"&gt;48
&lt;/span&gt;&lt;span class="lnt"&gt;49
&lt;/span&gt;&lt;span class="lnt"&gt;50
&lt;/span&gt;&lt;span class="lnt"&gt;51
&lt;/span&gt;&lt;span class="lnt"&gt;52
&lt;/span&gt;&lt;span class="lnt"&gt;53
&lt;/span&gt;&lt;span class="lnt"&gt;54
&lt;/span&gt;&lt;span class="lnt"&gt;55
&lt;/span&gt;&lt;span class="lnt"&gt;56
&lt;/span&gt;&lt;span class="lnt"&gt;57
&lt;/span&gt;&lt;span class="lnt"&gt;58
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;➜ ~ gource -help
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;Gource v0.51
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;Usage: gource &lt;span class="o"&gt;[&lt;/span&gt;options&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;path&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;用法: gource &lt;span class="o"&gt;[&lt;/span&gt;选项&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;路径&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;Options:
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; -h, --help 帮助
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; -WIDTHxHEIGHT, --viewport 设定窗口大小
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; -f, --fullscreen 全屏显示
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; --screen SCREEN 画面编号
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; --multi-sampling 启用多重采样
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; --no-vsync 禁用垂直同步
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; --start-date &lt;span class="s1"&gt;&amp;#39;YYYY-MM-DD hh:mm:ss +tz&amp;#39;&lt;/span&gt; 从日期和可选时间开始
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; --stop-date &lt;span class="s1"&gt;&amp;#39;YYYY-MM-DD hh:mm:ss +tz&amp;#39;&lt;/span&gt; 停在某个日期和可选时间
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; -p, --start-position POSITION 从某个位置开始&lt;span class="o"&gt;(&lt;/span&gt;0.0-1.0 or &lt;span class="s1"&gt;&amp;#39;random&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; --stop-position POSITION 停在某个位置
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; -t, --stop-at-time SECONDS 在指定的秒数后停止
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; --stop-at-end 在日志结尾处停止
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; --dont-stop 在日志结束后继续运行
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; --loop 在日志末尾循环
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; -a, --auto-skip-seconds SECONDS 如果没有任何反应，则自动跳至下一个条目
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; 持续几秒钟&lt;span class="o"&gt;(&lt;/span&gt;default: 3&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; --disable-auto-skip 禁用自动跳过
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; -s, --seconds-per-day SECONDS 每天以秒为单位的速度&lt;span class="o"&gt;(&lt;/span&gt;default: 10&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; --realtime 实时播放速度
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; --no-time-travel 如果提交时间是过去的时间请使用上一次提交的时间
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; -c, --time-scale SCALE 更改模拟时间范围&lt;span class="o"&gt;(&lt;/span&gt;default: 1.0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; -e, --elasticity FLOAT 节点弹性&lt;span class="o"&gt;(&lt;/span&gt;default: 0.0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; --key 显示文件扩展名
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; --user-image-dir DIRECTORY 包含要用作头像的图像的目录
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; --default-user-image IMAGE 默认用户图像文件
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; --colour-images 使用单色图像
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; -i, --file-idle-time SECONDS 时间文件保持空闲&lt;span class="o"&gt;(&lt;/span&gt;default: 0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; --max-files NUMBER 最大文件数或0（无限制）
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; --max-file-lag SECONDS 提交的最大时间文件可能会出现
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; --log-command VCS 显示VCS日志命令&lt;span class="o"&gt;(&lt;/span&gt;git,svn,hg,bzr,cvs2cl&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; --log-format VCS 指定日志格式&lt;span class="o"&gt;(&lt;/span&gt;git,svn,hg,bzr,cvs2cl,custom&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; --load-config CONF_FILE 加载配置文件
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; --save-config CONF_FILE 使用当前选项保存配置文件
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; -o, --output-ppm-stream FILE 将PPM流输出到文件 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; STDOUT&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; -r, --output-framerate FPS 输出帧率&lt;span class="o"&gt;(&lt;/span&gt;25,30,60&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;PATH可以是受支持的版本控制目录，日志文件，Gource配置文件或用于读取STDIN的&lt;span class="s1"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;。
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;如果省略，则gource将尝试从当前目录生成日志。
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;要查看完整的命令行选项，请使用 “-H”
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;hr/&gt;&lt;p&gt;关注微信公众号，第一时间获取最新内容，让我们一起变得更强！&lt;/p&gt;&lt;p&gt;&lt;img src="https://static.debuginn.com/20241111FZS0zY.png" alt="wechat" /&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Debug客栈：&lt;/strong&gt;&lt;a href="https://blog.debuginn.com/subscribe"&gt;订阅本站&lt;/a&gt;· &lt;a href="https://blog.debuginn.com/archives"&gt;文章归档&lt;/a&gt;· &lt;a href="https://blog.debuginn.com/project"&gt;我的项目&lt;/a&gt;· &lt;a href="https://blog.debuginn.com/links"&gt;友情链接&lt;/a&gt;· &lt;a href="https://blog.debuginn.com/use"&gt;我的使用&lt;/a&gt;· &lt;a href="https://photo.debuginn.com"&gt;摄影展集&lt;/a&gt;· &lt;a href="https://debuginn.com"&gt;我的主页&lt;/a&gt;&lt;/p&gt;</description></item><item><title>Git 命令 reset 和 revert 的区别</title><link>https://blog.debuginn.com/p/git-reset-revert/</link><pubDate>Tue, 21 Sep 2021 17:33:00 +0800</pubDate><guid>https://blog.debuginn.com/p/git-reset-revert/</guid><description>&lt;img src="https://webp.debuginn.com/202302262207101.jpg" alt="Featured image of post Git 命令 reset 和 revert 的区别" /&gt;&lt;h2 id="前言"&gt;&lt;a href="#%e5%89%8d%e8%a8%80" class="header-anchor"&gt;&lt;/a&gt;前言
&lt;/h2&gt;&lt;p&gt;在团队开发中，使用 Git 作为版本开发工具，可以便捷地协同多人管理并行开发，但是由于自己或者其他人代码提交污染了远程分支，就需要对远程代码进行恢复操作，Git 提供了 reset 和 revert 两种命令来进行恢复操作，这两种操作效果是截然不同的，不太清楚这个原理的同学需要了解一下，以免在实际的开发过程中翻车，导致线上远程仓库不可逆转的操作。&lt;/p&gt;
&lt;p&gt;首先从英文释义来讲，reset 是重置的意思，revert 是恢复、还原的意思，作为 Coder ，第一感觉 reset 的效果比 revert 更猛一些，实际情况也的确如此，让我们一起探讨一下吧。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://webp.debuginn.com/202302262208546.png"
loading="lazy"
alt="git"
&gt;&lt;/p&gt;
&lt;h2 id="背景"&gt;&lt;a href="#%e8%83%8c%e6%99%af" class="header-anchor"&gt;&lt;/a&gt;背景
&lt;/h2&gt;&lt;p&gt;Git 的每一次提交都是一次 commit，上图可以看到在时间线上有三次提交，此时 HEAD 指向 main 分支，main 分支又指向最新的 Commit3。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HEAD 是指向当前分支的最新提交的指针，可以在任意分支进行切换；&lt;/li&gt;
&lt;li&gt;main （master）分支，是一个 git 代码仓库的主分支也是默认分支；&lt;/li&gt;
&lt;li&gt;commit 每一次提交代码都会产生一个 commit id 来标识工作区的变更与改动。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="实践出真理"&gt;&lt;a href="#%e5%ae%9e%e8%b7%b5%e5%87%ba%e7%9c%9f%e7%90%86" class="header-anchor"&gt;&lt;/a&gt;实践出真理
&lt;/h2&gt;&lt;p&gt;为了直接明白的了解其原理，我这里在 github 上创建一个空白的仓库，按照上图创建三次提交：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt; 1
&lt;/span&gt;&lt;span class="lnt"&gt; 2
&lt;/span&gt;&lt;span class="lnt"&gt; 3
&lt;/span&gt;&lt;span class="lnt"&gt; 4
&lt;/span&gt;&lt;span class="lnt"&gt; 5
&lt;/span&gt;&lt;span class="lnt"&gt; 6
&lt;/span&gt;&lt;span class="lnt"&gt; 7
&lt;/span&gt;&lt;span class="lnt"&gt; 8
&lt;/span&gt;&lt;span class="lnt"&gt; 9
&lt;/span&gt;&lt;span class="lnt"&gt;10
&lt;/span&gt;&lt;span class="lnt"&gt;11
&lt;/span&gt;&lt;span class="lnt"&gt;12
&lt;/span&gt;&lt;span class="lnt"&gt;13
&lt;/span&gt;&lt;span class="lnt"&gt;14
&lt;/span&gt;&lt;span class="lnt"&gt;15
&lt;/span&gt;&lt;span class="lnt"&gt;16
&lt;/span&gt;&lt;span class="lnt"&gt;17
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;commit b0ef8f9125226af8f06ff1aba7c1f1fc83adea9b &lt;span class="o"&gt;(&lt;/span&gt;HEAD -&amp;gt; master, origin/master&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;Author: debuginn &amp;lt;debuginn@icloud.com&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;Date: Tue Sep &lt;span class="m"&gt;21&lt;/span&gt; 16:36:39 &lt;span class="m"&gt;2021&lt;/span&gt; +0800
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; feat add 3.go
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;commit 338bf3e30983d34074f37a18b3ff80ea9bca75f0
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;Author: debuginn &amp;lt;debuginn@icloud.com&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;Date: Tue Sep &lt;span class="m"&gt;21&lt;/span&gt; 16:36:09 &lt;span class="m"&gt;2021&lt;/span&gt; +0800
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; feat add 2.go
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;commit 6b166ed34962da08d944e2b1d3f36d9015dd8f35
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;Author: debuginn &amp;lt;debuginn@icloud.com&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;Date: Tue Sep &lt;span class="m"&gt;21&lt;/span&gt; 16:35:16 &lt;span class="m"&gt;2021&lt;/span&gt; +0800
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; feat add 1.go
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id="git-reset"&gt;&lt;a href="#git-reset" class="header-anchor"&gt;&lt;/a&gt;Git Reset
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;git reset&lt;/code&gt; 的作用是将 HEAD 指向指定的版本上去：&lt;/p&gt;
&lt;p&gt;&lt;img src="https://webp.debuginn.com/202302262210014.png"
loading="lazy"
alt="git reset"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1 使用 git log 查看提交记录：&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt; 1
&lt;/span&gt;&lt;span class="lnt"&gt; 2
&lt;/span&gt;&lt;span class="lnt"&gt; 3
&lt;/span&gt;&lt;span class="lnt"&gt; 4
&lt;/span&gt;&lt;span class="lnt"&gt; 5
&lt;/span&gt;&lt;span class="lnt"&gt; 6
&lt;/span&gt;&lt;span class="lnt"&gt; 7
&lt;/span&gt;&lt;span class="lnt"&gt; 8
&lt;/span&gt;&lt;span class="lnt"&gt; 9
&lt;/span&gt;&lt;span class="lnt"&gt;10
&lt;/span&gt;&lt;span class="lnt"&gt;11
&lt;/span&gt;&lt;span class="lnt"&gt;12
&lt;/span&gt;&lt;span class="lnt"&gt;13
&lt;/span&gt;&lt;span class="lnt"&gt;14
&lt;/span&gt;&lt;span class="lnt"&gt;15
&lt;/span&gt;&lt;span class="lnt"&gt;16
&lt;/span&gt;&lt;span class="lnt"&gt;17
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;commit b0ef8f9125226af8f06ff1aba7c1f1fc83adea9b &lt;span class="o"&gt;(&lt;/span&gt;HEAD -&amp;gt; master, origin/master&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;Author: debuginn &amp;lt;debuginn@icloud.com&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;Date: Tue Sep &lt;span class="m"&gt;21&lt;/span&gt; 16:36:39 &lt;span class="m"&gt;2021&lt;/span&gt; +0800
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; feat add 3.go
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;commit 338bf3e30983d34074f37a18b3ff80ea9bca75f0
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;Author: debuginn &amp;lt;debuginn@icloud.com&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;Date: Tue Sep &lt;span class="m"&gt;21&lt;/span&gt; 16:36:09 &lt;span class="m"&gt;2021&lt;/span&gt; +0800
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; feat add 2.go
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;commit 6b166ed34962da08d944e2b1d3f36d9015dd8f35
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;Author: debuginn &amp;lt;debuginn@icloud.com&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;Date: Tue Sep &lt;span class="m"&gt;21&lt;/span&gt; 16:35:16 &lt;span class="m"&gt;2021&lt;/span&gt; +0800
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; feat add 1.go
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;这里可以看到我们提交了三次记录，我们现在想恢复到第一次 commit 提交的时候。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2 使用 git reset &amp;ndash;hard 命令操作：&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;span class="lnt"&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;➜ demo git:&lt;span class="o"&gt;(&lt;/span&gt;master&lt;span class="o"&gt;)&lt;/span&gt; git reset --hard 6b166ed34962da08d944e2b1d3f36d9015dd8f35
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;HEAD 现在位于 6b166ed feat add 1.go
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;再次查看 git log :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;span class="lnt"&gt;2
&lt;/span&gt;&lt;span class="lnt"&gt;3
&lt;/span&gt;&lt;span class="lnt"&gt;4
&lt;/span&gt;&lt;span class="lnt"&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;commit 6b166ed34962da08d944e2b1d3f36d9015dd8f35 &lt;span class="o"&gt;(&lt;/span&gt;HEAD -&amp;gt; master&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;Author: debuginn &amp;lt;debuginn@icloud.com&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;Date: Tue Sep &lt;span class="m"&gt;21&lt;/span&gt; 16:35:16 &lt;span class="m"&gt;2021&lt;/span&gt; +0800
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; feat add 1.go
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;此时我们可以看到已经恢复到了第一次提交代码的时候，目前我们是使用 &lt;code&gt;git reset --hard&lt;/code&gt; 的方式，其实这里存在着三种方式，TODO 下一篇 git 操作讲一下。&lt;/p&gt;
&lt;p&gt;这时候我们只是讲本地的 HEAD 指向了 main 分支的 commit 1，但是远程并没有变更，此时需要强行推一下就可以了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3 使用git push -f 强行推送到远程：&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;span class="lnt"&gt;2
&lt;/span&gt;&lt;span class="lnt"&gt;3
&lt;/span&gt;&lt;span class="lnt"&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;➜ demo git:&lt;span class="o"&gt;(&lt;/span&gt;master&lt;span class="o"&gt;)&lt;/span&gt; git push -f
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;总共 0（差异 0），复用 0（差异 0），包复用 &lt;span class="m"&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;To github.com:debuginn/demo.git
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; + b98f95e...6b166ed master -&amp;gt; master &lt;span class="o"&gt;(&lt;/span&gt;forced update&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;img src="https://webp.debuginn.com/202302262212430.png"
loading="lazy"
alt="github"
&gt;&lt;/p&gt;
&lt;p&gt;此时我们可以看到远程也没有了我们之前提交的三次记录而是只有第一次的提交记录。&lt;/p&gt;
&lt;p&gt;在团队合作的共同操作一个仓库的时候， git reset 命令一定要慎重使用，在使用的时候一定要再三确认其他同学的代码是否会被重置操作而导致代码丢失，导致一些提交记录的丢失，这些都是不可逆的，一定要慎重。&lt;/p&gt;
&lt;h3 id="git-revert"&gt;&lt;a href="#git-revert" class="header-anchor"&gt;&lt;/a&gt;Git revert
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;git revert&lt;/code&gt; 是用来重做某一个 commit 提交的内容，在我们原始的提交之中，我们会发现分支上面有创建了一个新的 commit 提交，而此时我们对于想重做的某个 commit 提交的内容都不存在了：&lt;/p&gt;
&lt;p&gt;&lt;img src="https://webp.debuginn.com/202302262214658.png"
loading="lazy"
alt="git revert"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1 使用git log查看提交记录：&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;span class="lnt"&gt;2
&lt;/span&gt;&lt;span class="lnt"&gt;3
&lt;/span&gt;&lt;span class="lnt"&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;Author: debuginn &amp;lt;debuginn@icloud.com&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;Date: Tue Sep &lt;span class="m"&gt;21&lt;/span&gt; 16:36:39 &lt;span class="m"&gt;2021&lt;/span&gt; +0800
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; feat add 3.go
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;2 使用git revert命令重做操作：&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;span class="lnt"&gt;2
&lt;/span&gt;&lt;span class="lnt"&gt;3
&lt;/span&gt;&lt;span class="lnt"&gt;4
&lt;/span&gt;&lt;span class="lnt"&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;➜ demo git:&lt;span class="o"&gt;(&lt;/span&gt;master&lt;span class="o"&gt;)&lt;/span&gt; git revert 338bf3e30983d34074f37a18b3ff80ea9bca75f0
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;删除 2.go
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="o"&gt;[&lt;/span&gt;master ef822b7&lt;span class="o"&gt;]&lt;/span&gt; Revert &lt;span class="s2"&gt;&amp;#34;feat add 2.go&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="m"&gt;1&lt;/span&gt; file changed, &lt;span class="m"&gt;9&lt;/span&gt; deletions&lt;span class="o"&gt;(&lt;/span&gt;-&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; delete mode &lt;span class="m"&gt;100644&lt;/span&gt; 2.go
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;再次查看 git log :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt; 1
&lt;/span&gt;&lt;span class="lnt"&gt; 2
&lt;/span&gt;&lt;span class="lnt"&gt; 3
&lt;/span&gt;&lt;span class="lnt"&gt; 4
&lt;/span&gt;&lt;span class="lnt"&gt; 5
&lt;/span&gt;&lt;span class="lnt"&gt; 6
&lt;/span&gt;&lt;span class="lnt"&gt; 7
&lt;/span&gt;&lt;span class="lnt"&gt; 8
&lt;/span&gt;&lt;span class="lnt"&gt; 9
&lt;/span&gt;&lt;span class="lnt"&gt;10
&lt;/span&gt;&lt;span class="lnt"&gt;11
&lt;/span&gt;&lt;span class="lnt"&gt;12
&lt;/span&gt;&lt;span class="lnt"&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;commit ef822b71c33a2dbbdaa350fddcfa14e8fc55e543 &lt;span class="o"&gt;(&lt;/span&gt;HEAD -&amp;gt; master, origin/master&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;Author: debuginn &amp;lt;debuginn@icloud.com&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;Date: Tue Sep &lt;span class="m"&gt;21&lt;/span&gt; 17:12:00 &lt;span class="m"&gt;2021&lt;/span&gt; +0800
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; Revert &lt;span class="s2"&gt;&amp;#34;feat add 2.go&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; This reverts commit 338bf3e30983d34074f37a18b3ff80ea9bca75f0.
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;commit b0ef8f9125226af8f06ff1aba7c1f1fc83adea9b
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;Author: debuginn &amp;lt;debuginn@icloud.com&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;Date: Tue Sep &lt;span class="m"&gt;21&lt;/span&gt; 17:05:39 &lt;span class="m"&gt;2021&lt;/span&gt; +0800
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; feat add 3.go
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;可以看到当前已经重做了一下 commit 2 的提交，已经讲 2.go 删除掉了。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://webp.debuginn.com/202302262217507.png"
loading="lazy"
alt="github"
&gt;&lt;/p&gt;
&lt;p&gt;可以看到 github 上面有了四次提交记录。&lt;/p&gt;
&lt;h2 id="总结"&gt;&lt;a href="#%e6%80%bb%e7%bb%93" class="header-anchor"&gt;&lt;/a&gt;总结
&lt;/h2&gt;&lt;p&gt;git reset和git revert都是属于重新恢复工作区以及远程提交的方式，但这两种操作有着截然不同的结果：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;git reset是将之前的提交记录全部抹去，将 HEAD 指向自己重置的提交记录，对应的提交记录都不复存在；&lt;/li&gt;
&lt;li&gt;git revert 操作是将选择的某一次提交记录 重做，若之后又有提交，提交记录还存在，只是将指定提交的代码给清除掉。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;选择合适的方式回滚自己的代码在团队合作中很重要，但是要慎重操作，不要丢失代码哦。&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;关注微信公众号，第一时间获取最新内容，让我们一起变得更强！&lt;/p&gt;&lt;p&gt;&lt;img src="https://static.debuginn.com/20241111FZS0zY.png" alt="wechat" /&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Debug客栈：&lt;/strong&gt;&lt;a href="https://blog.debuginn.com/subscribe"&gt;订阅本站&lt;/a&gt;· &lt;a href="https://blog.debuginn.com/archives"&gt;文章归档&lt;/a&gt;· &lt;a href="https://blog.debuginn.com/project"&gt;我的项目&lt;/a&gt;· &lt;a href="https://blog.debuginn.com/links"&gt;友情链接&lt;/a&gt;· &lt;a href="https://blog.debuginn.com/use"&gt;我的使用&lt;/a&gt;· &lt;a href="https://photo.debuginn.com"&gt;摄影展集&lt;/a&gt;· &lt;a href="https://debuginn.com"&gt;我的主页&lt;/a&gt;&lt;/p&gt;</description></item></channel></rss>